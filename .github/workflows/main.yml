name: auto deploy

# on:
#   push:
#     branches:
#       - main

# 테스트 위함
on:
  push:
    branches:
      - feature/**

jobs:
  push_to_registry:
    name: Push to ncp container registry
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setting .env.production file
        run: |
          echo "DB_PRODUCTION_TYPE=${{ secrets.DB_PRODUCTION_TYPE }}" >> .env.production
          echo "DB_PRODUCTION_HOST=${{ secrets.DB_PRODUCTION_HOST }}" >> .env.production
          echo "DB_PRODUCTION_PORT=${{ secrets.DB_PRODUCTION_PORT }}" >> .env.production
          echo "DB_PRODUCTION_USERNAME=${{ secrets.DB_PRODUCTION_USERNAME }}" >> .env.production
          echo "DB_PRODUCTION_PASSWORD=${{ secrets.DB_PRODUCTION_PASSWORD }}" >> .env.production
          echo "DB_PRODUCTION_NAME=${{ secrets.DB_PRODUCTION_NAME }}" >> .env.production

          echo "TOKEN_ACCESS_SECRET=${{ secrets.TOKEN_ACCESS_SECRET }}" >> .env.production
          echo "REFRESH_TOKEN_SECRET=${{ secrets.REFRESH_TOKEN_SECRET }}" >> .env.production

          echo "NCP_PUBLIC_CONTAINER_REGISTRY=${{ secrets.NCP_PUBLIC_CONTAINER_REGISTRY }}" >> .env.production
          echo "NCP_PRIVATE_CONTAINER_REGISTRY=${{ secrets.NCP_PRIVATE_CONTAINER_REGISTRY }}" >> .env.production
          echo "NCP_ACCESS_KEY=${{ secrets.NCP_ACCESS_KEY }}" >> .env.production
          echo "NCP_SECRET_KEY=${{ secrets.NCP_SECRET_KEY }}" >> .env.production

          echo "IMAGE_REGION=${{ secrets.IMAGE_REGION }}" >> .env.production
          echo "IMAGE_ENDPOINT=${{ secrets.IMAGE_ENDPOINT }}" >> .env.production
          echo "IMAGE_BUCKET=${{ secrets.IMAGE_BUCKET }}" >> .env.production

          echo "PRODUCTION_HOST=${{ secrets.PRODUCTION_HOST }}" >> .env.production
          echo "PRODUCTION_USERNAME=${{ secrets.PRODUCTION_USERNAME }}" >> .env.production
          echo "PRODUCTION_PASSWORD=${{ secrets.PRODUCTION_PASSWORD }}" >> .env.production
          echo "PRODUCTION_PORT=${{ secrets.PRODUCTION_PORT }}" >> .env.production

          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> .env.production
          echo "ORGANIZATION_INFO=${{ secrets.ORGANIZATION_INFO }}" >> .env.production

          echo "REDIS_PRODUCTION_USER_NAME=${{ secrets.REDIS_PRODUCTION_USER_NAME }}" >> .env.production
          echo "REDIS_PRODUCTION_USER_PASSWORD=${{ secrets.REDIS_PRODUCTION_USER_PASSWORD }}" >> .env.production
          echo "REDIS_PRODUCTION_USER_HOST=${{ secrets.REDIS_PRODUCTION_USER_HOST }}" >> .env.production
          echo "REDIS_PRODUCTION_USER_PORT=${{ secrets.REDIS_PRODUCTION_USER_PORT }}" >> .env.production

          cat .env.production

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to NCP Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.NCP_PUBLIC_CONTAINER_REGISTRY }}
          username: ${{ secrets.NCP_ACCESS_KEY }}
          password: ${{ secrets.NCP_SECRET_KEY }}

      - name: Build using Docker Compose
        run: |

          echo "input env ..."

          APPLICATION_IMAGE_NAME=${{ secrets.NCP_PRIVATE_CONTAINER_REGISTRY }}/jihoon-production/application-image:v0.0.1
          MYSQL_IMAGE_NAME=${{ secrets.NCP_PRIVATE_CONTAINER_REGISTRY }}/jihoon-production/mysql:v0.0.1
          REDIS_IMAGE_NAME=${{ secrets.NCP_PRIVATE_CONTAINER_REGISTRY }}/jihoon-production/redis:v0.0.1

          docker-compose -f docker-compose.production.yml build \
            --build-arg APPLICATION_IMAGE_NAME=${APPLICATION_IMAGE_NAME} \
            --build-arg MYSQL_IMAGE_NAME=${MYSQL_IMAGE_NAME} \
            --build-arg REDIS_IMAGE_NAME=${REDIS_IMAGE_NAME}
            
          echo "build end..."

          docker-compose -f docker-compose.production.yml images

          echo "compose image result..."

          docker push $APPLICATION_IMAGE_NAME
          docker push $MYSQL_IMAGE_NAME
          docker push $REDIS_IMAGE_NAME

          echo "push finish"

  pull_from_registry:
    name: Connect server ssh and pull from container registry
    needs: push_to_registry
    runs-on: ubuntu-latest
    steps:
      - name: connect ssh
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USERNAME }}
          password: ${{ secrets.PRODUCTION_PASSWORD }}
          script: |
            cd app 
            docker-compose down
            docker-compose up -d
            docker image prune -f
